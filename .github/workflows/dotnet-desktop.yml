name: .NET Core Desktop CI/CD
 
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
 
jobs:
  build:
 
    strategy:
      matrix:
        configuration: [Debug, Release]
 
    runs-on: windows-latest
 
    env:
      Solution_Name: FinalDDD.sln          # Replace with your actual solution file name.
      Test_Project_Path: TestProject1\TestProject1.csproj  # Path to your test project file.
      Wap_Project_Directory: PersonalSupervisorSystem.Package  # Directory for your Windows Application Packaging (WAP) project.
      Wap_Project_Path: PersonalSupervisorSystem.Package\PersonalSupervisorSystem.Package.wapproj  # Path to your WAP project file.
 
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
 
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
 
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2
 
    - name: Restore Dependencies
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
 
    - name: Build Solution
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
 
    - name: Execute Unit Tests
      run: dotnet test $env:Test_Project_Path --configuration $env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
 
    - name: Set Environment Variables for Secrets
      shell: pwsh
      run: |
        if (-not [string]::IsNullOrEmpty("${{ secrets.Base64_Encoded_Pfx }}") -and -not [string]::IsNullOrEmpty("${{ secrets.Pfx_Key }}")) {
          echo "HAS_CERTIFICATE=true" >> $env:GITHUB_ENV
        } else {
          echo "HAS_CERTIFICATE=false" >> $env:GITHUB_ENV
        }
 
    - name: Decode Signing Certificate
      if: env.HAS_CERTIFICATE == 'true'
      shell: pwsh
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
 
    - name: Package Application
      if: env.HAS_CERTIFICATE == 'true'
      run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      env:
        Appx_Bundle: Always
        Appx_Bundle_Platforms: x86|x64
        Appx_Package_Build_Mode: StoreUpload
        Configuration: ${{ matrix.configuration }}
 
    - name: Remove Signing Certificate
      if: env.HAS_CERTIFICATE == 'true'
      run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx
 
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
